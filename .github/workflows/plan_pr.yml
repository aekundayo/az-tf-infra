name: 'Plan PR commit'
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      keyvaultName: 
        default: "kvlt-ds-dev-westeurope"
        description: "The name of the key vault to use for SSH keys"
  workflow_call:
  


jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev
    concurrency: ci-${{ github.ref }}
    env:
      DIR: 'environment'
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      keyvaultName: "kvlt-ds-dev-westeurope"

    steps:
      - uses: actions/checkout@v3
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5
          terraform_wrapper: false # https://github.com/gruntwork-io/terragrunt/issues/1202

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tfsec_formats: sarif,csv
          tfsec_args: --soft-fail


      - name: Terraform Init
        id: init
        run: terraform init --backend-config=backend.conf
        working-directory: ${{ env.DIR }}

      - name: Run SSH Key Gen
        id: step_one
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Extract SSH Keys from Key Vault is present.
            SSH_KEY_PRIVATE=$(az keyvault secret show --vault-name ${{env.keyvaultName}} --name agentVMPrivateKey --query value --output tsv || true)
            SSH_KEY_PUBLIC=$(az keyvault secret show --vault-name  ${{env.keyvaultName}} --name agentVMPublicKey --query value --output tsv || true)
            # Check if SSH_KEY_PRIVATE and SSH_KEY_PUBLIC are not null
            if [[ -n "$SSH_KEY_PRIVATE" && -n "$SSH_KEY_PUBLIC" ]]; then
              echo "SSH_KEY_PRIVATE and SSH_KEY_PUBLIC are not null, writing content to files"
              
              # Write the contents of SSH_KEY_PRIVATE into agent_ssh_private.pem
              echo "$SSH_KEY_PRIVATE" > ${{ env.DIR }}/agent_ssh
              echo "written private key"
              
              # Write the contents of SSH_KEY_PUBLIC into agent_ssh_public.pem
              echo "$SSH_KEY_PUBLIC" > ${{ env.DIR }}/agent_ssh.pub
              echo "written public key"

            else
              echo "Either SSH_KEY_PRIVATE or SSH_KEY_PUBLIC is null, recreating ssh keys"
              ${{ env.DIR }}/ssh_keygen.sh ${{ env.DIR }} agent_ssh
            fi

      - name: Run VPN CERT and Key Gen
        id: step_two
        uses: azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            # Extract SSH Keys from Key Vault is present.
            VPN_SERVER_KEY=$(az keyvault secret show --vault-name  ${{ env.keyvaultName }} --name VPNRootCAKey --query value --output tsv || true)
            VPN_SERVER_CRT=$(az keyvault secret show --vault-name  ${{ env.keyvaultName }} --name VPNRootCACrt --query value --output tsv || true)
            VPN_CLIENT_KEY=$(az keyvault secret show --vault-name  ${{ env.keyvaultName }} --name VPNClientKey --query value --output tsv || true)
            VPN_CLIENT_CRT=$(az keyvault secret show --vault-name  ${{ env.keyvaultName }} --name VPNClientCrt --query value --output tsv || true)
            # Check if VPN_SERVER_KEY, VPN_SERVER_CRT, VPN_CLIENT_KEY, VPN_CLIENT_CRT are not null
            if [[ -n "$VPN_SERVER_KEY" && -n "$VPN_SERVER_CRT" && -n "$VPN_CLIENT_KEY" && -n "$VPN_CLIENT_CRT" ]]; then
              echo "VPN_SERVER_KEY and VPN_SERVER_CRT are not null, writing content to files"
              
              # Write the contents of VPN_SERVER_KEY into RootCA.key
              echo "$VPN_SERVER_KEY" > ${{ env.DIR }}/RootCA.key
              echo "written rootca key"
              
              
              # Write the contents of VPN_SERVER_CRT into RootCA.crt
              echo "$VPN_SERVER_CRT" > ${{ env.DIR }}/RootCA.crt
              echo "written rootca crt"
              

              # Write the contents of VPN_CLIENT_KEY into ClientCertificate.key
              echo "$VPN_CLIENT_KEY" > ${{ env.DIR }}/ClientCertificate.key
              echo "written Client Certificate key"
              
              
              # Write the contents of VPN_CLIENT_CRT into ClientCertificate.crt
              echo "$VPN_CLIENT_CRT" > ${{ env.DIR }}/ClientCertificate.crt
              echo "written public key"
              
            else
              echo "Either  VPN_SERVER_KEY, VPN_SERVER_CRT, VPN_CLIENT_KEY, VPN_CLIENT_CRT is null, recreating vpn certs & keys"
              ${{ env.DIR }}/vpn-certgen.sh ${{ env.DIR }} RootCA ClientCertificate
            fi

      - name: Terraform Validate
        id: validate
        run: terraform validate 
        working-directory: ${{ env.DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -var-file="terraform.tfvars"
        working-directory: ${{ env.DIR }}
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })


